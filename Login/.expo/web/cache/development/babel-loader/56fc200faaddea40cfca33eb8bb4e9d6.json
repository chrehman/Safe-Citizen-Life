{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\React Native\\\\MapExpo\\\\frontend\\\\screens\\\\HomeScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Camera } from 'expo-camera';\nimport { AntDesign, MaterialIcons } from '@expo/vector-icons';\nimport firebase from 'firebase/app';\nimport \"firebase/firestore\";\nimport \"firebase/firestorage\";\nvar WINDOW_HEIGHT = Dimensions.get('window').height;\nvar CAPTURE_SIZE = Math.floor(WINDOW_HEIGHT * 0.08);\nexport default function HomeScreen() {\n  var cameraRef = useRef();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cameraType = _useState4[0],\n      setCameraType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isPreview = _useState6[0],\n      setIsPreview = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isCameraReady = _useState8[0],\n      setIsCameraReady = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      uploading = _useState10[0],\n      setUploading = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      transfered = _useState12[0],\n      setTransfered = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      uploadUri = _useState14[0],\n      setUploadUri = _useState14[1];\n\n  useEffect(function () {\n    onHandlePermission();\n  }, []);\n\n  var onHandlePermission = function onHandlePermission() {\n    var _await$Camera$request, status;\n\n    return _regeneratorRuntime.async(function onHandlePermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n          case 2:\n            _await$Camera$request = _context.sent;\n            status = _await$Camera$request.status;\n            setHasPermission(status === 'granted');\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onCameraReady = function onCameraReady() {\n    setIsCameraReady(true);\n  };\n\n  var switchCamera = function switchCamera() {\n    if (isPreview) {\n      return;\n    }\n\n    setCameraType(function (prevCameraType) {\n      return prevCameraType === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back;\n    });\n  };\n\n  var uploadImage = function uploadImage() {\n    var fileName;\n    return _regeneratorRuntime.async(function uploadImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fileName = uploadUri.substring(uploadUri.lastIndexOf('/') + 1);\n            console.log(\"FileName\", fileName);\n            setUploading(true);\n            _context2.prev = 3;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(firebase.storage().ref(fileName).putFile(uploadUri));\n\n          case 6:\n            setUploading(false);\n            Alert.alert('Image Uploaded', 'Your image has been uploaded to firebase');\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.log(_context2.t0);\n\n          case 13:\n            setUploadUri(null);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 10]], Promise);\n  };\n\n  var onSnap = function onSnap() {\n    var options, data, uri, source, fileName, base64Img;\n    return _regeneratorRuntime.async(function onSnap$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!cameraRef.current) {\n              _context3.next = 18;\n              break;\n            }\n\n            options = {\n              quality: 0.7,\n              base64: true\n            };\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(cameraRef.current.takePictureAsync(options));\n\n          case 4:\n            data = _context3.sent;\n            setUploadUri(data.uri);\n            uri = data.uri;\n            source = data.base64;\n            console.log(cameraRef.current.getSupportedRatiosAsync());\n\n            if (!source) {\n              _context3.next = 18;\n              break;\n            }\n\n            _context3.next = 12;\n            return _regeneratorRuntime.awrap(cameraRef.current.resumePreview());\n\n          case 12:\n            setIsPreview(true);\n            fileName = uri.substring(uri.lastIndexOf('/') + 1);\n            console.log(\"FileName\", fileName);\n            setUploading(true);\n\n            try {\n              setUploading(false);\n              Alert.alert('Image Uploaded', 'Your image has been uploaded to firebase');\n            } catch (e) {\n              console.log(e);\n            }\n\n            base64Img = \"data:image/jpg;base64,\" + source;\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var cancelPreview = function cancelPreview() {\n    return _regeneratorRuntime.async(function cancelPreview$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(cameraRef.current.resumePreview());\n\n          case 2:\n            setIsPreview(false);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadPreview = function uploadPreview() {\n    return _regeneratorRuntime.async(function uploadPreview$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(cameraRef.current.resumePreview());\n\n          case 2:\n            setIsPreview(false);\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      style: styles.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, React.createElement(Camera, {\n    ref: cameraRef,\n    style: styles.container,\n    type: cameraType,\n    onCameraReady: onCameraReady,\n    useCamera2Api: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, isPreview && React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 10\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: cancelPreview,\n    style: styles.closeButton,\n    activeOpacity: 0.7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, React.createElement(AntDesign, {\n    name: \"close\",\n    size: 32,\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: uploadPreview,\n    style: styles.closeButton,\n    activeOpacity: 0.7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 12\n    }\n  }, React.createElement(AntDesign, {\n    name: \"close\",\n    size: 32,\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }))), !isPreview && React.createElement(View, {\n    style: styles.bottomButtonsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    disabled: !isCameraReady,\n    onPress: switchCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"flip-camera-ios\",\n    size: 28,\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  })), React.createElement(TouchableOpacity, {\n    activeOpacity: 0.7,\n    disabled: !isCameraReady,\n    onPress: onSnap,\n    style: styles.capture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: _objectSpread({}, StyleSheet.absoluteFillObject),\n  text: {\n    color: '#fff'\n  },\n  bottomButtonsContainer: {\n    position: 'absolute',\n    flexDirection: 'row',\n    bottom: 28,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  closeButton: {\n    position: 'absolute',\n    top: 35,\n    right: 20,\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#5A45FF',\n    opacity: 0.7\n  },\n  capture: {\n    backgroundColor: '#5A45FF',\n    borderRadius: 5,\n    height: CAPTURE_SIZE,\n    width: CAPTURE_SIZE,\n    borderRadius: Math.floor(CAPTURE_SIZE / 2),\n    marginBottom: 28,\n    marginHorizontal: 30\n  }\n});","map":{"version":3,"sources":["F:/React Native/MapExpo/frontend/screens/HomeScreen.js"],"names":["React","useState","useRef","useEffect","Camera","AntDesign","MaterialIcons","firebase","WINDOW_HEIGHT","Dimensions","get","height","CAPTURE_SIZE","Math","floor","HomeScreen","cameraRef","hasPermission","setHasPermission","Constants","Type","back","cameraType","setCameraType","isPreview","setIsPreview","isCameraReady","setIsCameraReady","uploading","setUploading","transfered","setTransfered","uploadUri","setUploadUri","onHandlePermission","requestPermissionsAsync","status","onCameraReady","switchCamera","prevCameraType","front","uploadImage","fileName","substring","lastIndexOf","console","log","storage","ref","putFile","Alert","alert","onSnap","current","options","quality","base64","takePictureAsync","data","uri","source","getSupportedRatiosAsync","resumePreview","e","base64Img","cancelPreview","uploadPreview","styles","text","container","closeButton","bottomButtonsContainer","capture","StyleSheet","create","absoluteFillObject","color","position","flexDirection","bottom","width","alignItems","justifyContent","top","right","borderRadius","backgroundColor","opacity","marginBottom","marginHorizontal"],"mappings":"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","sourcesContent":["// import React,{useEffect,useState} from 'react';\n// import { View, Text,Button, StyleSheet, StatusBar,TouchableOpacity } from 'react-native';\n// import { useTheme } from '@react-navigation/native';\n// // import ImagePicker from 'react-native-image-picker';\n// // import * as ImagePicker from \"react-native-image-picker\"\n// import * as ImagePicker from 'expo-image-picker';\n// // import {  Button } from 'native-base';\n// const HomeScreen = ({navigation}) => {\n//   const [image, setImage] = useState(null);\n//   useEffect(() => {\n//     (async () => {\n//       if (Platform.OS !== 'web') {\n//         const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n//         if (status !== 'granted') {\n//           alert('Sorry, we need camera roll permissions to make this work!');\n//         }\n//       }\n//     })();\n//   }, []);\n\n//   const pickImage = async () => {\n//     let result = await ImagePicker.launchImageLibraryAsync({\n//       mediaTypes: ImagePicker.MediaTypeOptions.All,\n//       allowsEditing: true,\n//       aspect: [4, 3],\n//       quality: 1,\n//     });\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Dimensions,\n  View,\n  Text,\n  TouchableOpacity,Alert\n} from 'react-native';\nimport { Camera } from 'expo-camera';\nimport { AntDesign, MaterialIcons } from '@expo/vector-icons';\nimport firebase from 'firebase/app';\nimport \"firebase/firestore\";\nimport \"firebase/firestorage\";\n\nconst WINDOW_HEIGHT = Dimensions.get('window').height;\nconst CAPTURE_SIZE = Math.floor(WINDOW_HEIGHT * 0.08);\n\nexport default function HomeScreen() {\n  const cameraRef = useRef();\n  const [hasPermission, setHasPermission] = useState(null);\n  const [cameraType, setCameraType] = useState(Camera.Constants.Type.back);\n  const [isPreview, setIsPreview] = useState(false);\n  const [isCameraReady, setIsCameraReady] = useState(false);\n  const [uploading,setUploading]=useState(false)\n  const [transfered,setTransfered]=useState(0)\n  const [uploadUri,setUploadUri]=useState('')\n  \n  useEffect(() => {\n    onHandlePermission();\n  }, []);\n\n  \n  const onHandlePermission = async () => {\n    const { status } = await Camera.requestPermissionsAsync();\n    setHasPermission(status === 'granted');\n  };\n\n  const onCameraReady = () => {\n    setIsCameraReady(true);\n  };\n\n  const switchCamera = () => {\n    if (isPreview) {\n      return;\n    }\n    setCameraType(prevCameraType =>\n      prevCameraType === Camera.Constants.Type.back\n        ? Camera.Constants.Type.front\n        : Camera.Constants.Type.back\n    );\n  };\n   const uploadImage=async()=>{\n    let fileName=uploadUri.substring(uploadUri.lastIndexOf('/')+1)\n      console.log(\"FileName\",fileName)\n      setUploading(true)\n      try{\n        await firebase.storage().ref(fileName).putFile(uploadUri)\n        setUploading(false)\n        Alert.alert(\n          'Image Uploaded',\n          'Your image has been uploaded to firebase'\n        )\n      }\n      catch(e){\n          console.log(e)\n      }\n      setUploadUri(null)\n  }\n\n  const onSnap = async () => {\n    if (cameraRef.current) {\n      const options = { quality: 0.7, base64: true };\n      const data = await cameraRef.current.takePictureAsync(options);\n      setUploadUri(data.uri)\n      let uri=data.uri\n      // console.log(uploadUri)\n      \n      const source = data.base64;\n      console.log(cameraRef.current.getSupportedRatiosAsync())\n      if (source) {\n        // await cameraRef.current.pausePreview();\n        await cameraRef.current.resumePreview();\n        setIsPreview(true);\n        let fileName=uri.substring(uri.lastIndexOf('/')+1)\n      console.log(\"FileName\",fileName)\n      setUploading(true)\n      try{\n        // await firebase.storage().ref(fileName).putFile(uri)\n        setUploading(false)\n        Alert.alert(\n          'Image Uploaded',\n          'Your image has been uploaded to firebase'\n        )\n      }\n      catch(e){\n          console.log(e)\n      }\n        let base64Img = `data:image/jpg;base64,${source}`;\n        // console.log(source)\n        // console.log(base64Img)\n      //   let apiUrl =\n      //     'https://api.cloudinary.com/v1_1/<your-cloud-name>/image/upload';\n      //   let data = {\n      //     file: base64Img,\n      //     upload_preset: '<your-upload-preset>'\n      //   };\n\n      //   fetch(apiUrl, {\n      //     body: JSON.stringify(data),\n      //     headers: {\n      //       'content-type': 'application/json'\n      //     },\n      //     method: 'POST'\n      //   })\n      //     .then(async response => {\n      //       let data = await response.json();\n      //       if (data.secure_url) {\n      //         alert('Upload successful');\n      //       }\n      //     })\n      //     .catch(err => {\n      //       alert('Cannot upload');\n      //       console.log(err);\n      //     });\n      }\n    }\n  };\n  \n \n\n  const cancelPreview = async () => {\n    await cameraRef.current.resumePreview();\n    setIsPreview(false);\n  };\n  const uploadPreview = async () => {\n    await cameraRef.current.resumePreview();\n    setIsPreview(false);\n  };\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text style={styles.text}>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera\n        ref={cameraRef}\n        style={styles.container}\n        type={cameraType}\n        onCameraReady={onCameraReady}\n        useCamera2Api={true}\n      />\n      <View style={styles.container}>\n        {isPreview && (\n         <View>\n          <TouchableOpacity\n            onPress={cancelPreview}\n            style={styles.closeButton}\n            activeOpacity={0.7}\n          >\n            <AntDesign name='close' size={32} color='#fff' />\n          </TouchableOpacity>\n           <TouchableOpacity\n            onPress={uploadPreview}\n            style={styles.closeButton}\n            activeOpacity={0.7}\n          >\n            <AntDesign name='close' size={32} color='#fff' />\n          </TouchableOpacity>\n         </View>\n          \n        )}\n        {!isPreview && (\n          <View style={styles.bottomButtonsContainer}>\n            <TouchableOpacity disabled={!isCameraReady} onPress={switchCamera}>\n              <MaterialIcons name='flip-camera-ios' size={28} color='white' />\n            </TouchableOpacity>\n            <TouchableOpacity\n              activeOpacity={0.7}\n              disabled={!isCameraReady}\n              onPress={onSnap}\n              style={styles.capture}\n            />\n          </View>\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject\n  },\n  text: {\n    color: '#fff'\n  },\n  bottomButtonsContainer: {\n    position: 'absolute',\n    flexDirection: 'row',\n    bottom: 28,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  closeButton: {\n    position: 'absolute',\n    top: 35,\n    right: 20,\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#5A45FF',\n    opacity: 0.7\n  },\n  capture: {\n    backgroundColor: '#5A45FF',\n    borderRadius: 5,\n    height: CAPTURE_SIZE,\n    width: CAPTURE_SIZE,\n    borderRadius: Math.floor(CAPTURE_SIZE / 2),\n    marginBottom: 28,\n    marginHorizontal: 30\n  }\n});\n\n//     console.log(result);\n\n//     if (!result.cancelled) {\n//       setImage(result.uri);\n//     }\n//   };\n//   const options = {\n//   title: 'Select Avatar',\n//   customButtons: [{ name: 'fb', title: 'Choose Photo from Facebook' }],\n//   storageOptions: {\n//     skipBackup: true,\n//     path: 'images',\n//   },\n// };\n//  const chooseImage = () => {\n//     let options = {\n//       title: 'Select Image',\n//       customButtons: [\n//         { name: 'customOptionKey', title: 'Choose Photo from Custom Option' },\n//       ],\n//       storageOptions: {\n//         skipBackup: true,\n//         path: 'images',\n//       },\n//     };\n//     ImagePicker.showImagePicker(options, (response) => {\n//       console.log('Response = ', response);\n\n//       if (response.didCancel) {\n//         console.log('User cancelled image picker');\n//       } else if (response.error) {\n//         console.log('ImagePicker Error: ', response.error);\n//       } else if (response.customButton) {\n//         console.log('User tapped custom button: ', response.customButton);\n//         alert(response.customButton);\n//       } else {\n//         const source = { uri: response.uri };\n\n//         // You can also display the image using data:\n//         // const source = { uri: 'data:image/jpeg;base64,' + response.data };\n//         // alert(JSON.stringify(response));s\n//         console.log('response', JSON.stringify(response));\n//         // this.setState({\n//         //   filePath: response,\n//         //   fileData: response.data,\n//         //   fileUri: response.uri\n//         // });\n//       }\n//     });\n//   }\n\n//   const launchCamera = () => {\n//     let options = {\n//       storageOptions: {\n//         skipBackup: true,\n//         path: 'images',\n//       },\n//     };\n//     ImagePicker.launchCamera(options, (response) => {\n//       console.log('Response = ', response);\n\n//       if (response.didCancel) {\n//         console.log('User cancelled image picker');\n//       } else if (response.error) {\n//         console.log('ImagePicker Error: ', response.error);\n//       } else if (response.customButton) {\n//         console.log('User tapped custom button: ', response.customButton);\n//         alert(response.customButton);\n//       } else {\n//         const source = { uri: response.uri };\n//         console.log('response', JSON.stringify(response));\n//         // this.setState({\n//         //   filePath: response,\n//         //   fileData: response.data,\n//         //   fileUri: response.uri\n//         // });\n//       }\n//     });\n\n//   }\n\n//   const launchImageLibrary = () => {\n//     let options = {\n//       storageOptions: {\n//         skipBackup: true,\n//         path: 'images',\n//       },\n//     };\n//     ImagePicker.launchImageLibrary(options, (response) => {\n//       console.log('Response = ', response);\n\n//       if (response.didCancel) {\n//         console.log('User cancelled image picker');\n//       } else if (response.error) {\n//         console.log('ImagePicker Error: ', response.error);\n//       } else if (response.customButton) {\n//         console.log('User tapped custom button: ', response.customButton);\n//         alert(response.customButton);\n//       } else {\n//         const source = { uri: response.uri };\n//         console.log('response', JSON.stringify(response));\n//         // this.setState({\n//         //   filePath: response,\n//         //   fileData: response.data,\n//         //   fileUri: response.uri\n//         // });\n//       }\n//     });\n\n//   }\n//   const { colors } = useTheme();\n\n//   const theme = useTheme();\n  \n//     return (\n//       <View style={styles.container}>\n//         {/* <StatusBar barStyle= { theme.dark ? \"light-content\" : \"dark-content\" }/> */}\n//         <StatusBar animated={true} barStyle='light-content' />\n//         <Text style={{color: colors.text}}>Home Screen</Text>\n//       <Button\n//         title=\"Go to details screen\"\n//         onPress={() => navigation.navigate(\"Details\")}\n//       />\n      \n//             <View style={styles.btnParentSection}>\n//               <TouchableOpacity onPress={()=> chooseImage()} style={styles.btnSection}  >\n//                 <Text style={styles.btnText}>Choose File</Text>\n//               </TouchableOpacity>\n\n//               <TouchableOpacity onPress={()=> {let options = {\n//       storageOptions: {\n//         skipBackup: true,\n//         path: 'images',\n//       },\n//     };\n//     ImagePicker.launchCamera(options, (response) => {\n//       console.log('Response = ', response);\n\n//       if (response.didCancel) {\n//         console.log('User cancelled image picker');\n//       } else if (response.error) {\n//         console.log('ImagePicker Error: ', response.error);\n//       } else if (response.customButton) {\n//         console.log('User tapped custom button: ', response.customButton);\n//         alert(response.customButton);\n//       } else {\n//         const source = { uri: response.uri };\n//         console.log('response', JSON.stringify(response));\n//         // this.setState({\n//         //   filePath: response,\n//         //   fileData: response.data,\n//         //   fileUri: response.uri\n//         // });\n//       }\n//     }); }} style={styles.btnSection}  >\n//                 <Text style={styles.btnText}>Directly Launch Camera</Text>\n//               </TouchableOpacity>\n\n//               <TouchableOpacity onPress={pickImage} style={styles.btnSection}  >\n//                 <Text style={styles.btnText}>Directly Launch Image Library</Text>\n//               </TouchableOpacity>\n//             </View>\n//        {/* <Button>\n//             <Text>Click Me!</Text>\n//           </Button> */}\n//       </View>\n//     );\n// };\n\n// export default HomeScreen;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1, \n//     alignItems: 'center', \n//     justifyContent: 'center'\n//   },\n// });\n"]},"metadata":{},"sourceType":"module"}